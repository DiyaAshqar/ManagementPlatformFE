//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    agreementPOST(body: FullAgreementDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Agreement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAgreementPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAgreementPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAgreementPOST(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param pageNumber (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    agreementGET(pageNumber: number | undefined, pageSize: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Agreement?";
        if (pageNumber === null)
            throw new globalThis.Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new globalThis.Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAgreementGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAgreementGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAgreementGET(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param step (optional) 
     * @return OK
     */
    agreementGET2(id: number, step: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Agreement/{id}?";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (step === null)
            throw new globalThis.Error("The parameter 'step' cannot be null.");
        else if (step !== undefined)
            url_ += "step=" + encodeURIComponent("" + step) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAgreementGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAgreementGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAgreementGET2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    attachmentGET(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachment/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAttachmentGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAttachmentGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAttachmentGET(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    attachmentDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachment/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAttachmentDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAttachmentDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAttachmentDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    agreement(agreementId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachment/agreement/{agreementId}";
        if (agreementId === undefined || agreementId === null)
            throw new globalThis.Error("The parameter 'agreementId' must be defined.");
        url_ = url_.replace("{agreementId}", encodeURIComponent("" + agreementId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAgreement(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAgreement(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAgreement(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    download(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Attachment/{id}/download";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownload(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    lookup(body: string[] | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Lookup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLookup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLookup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLookup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AgreementDto implements IAgreementDto {
    id?: number | undefined;
    projectNumber?: string | undefined;
    agreementDate?: Date;
    projectName!: string | undefined;
    businessSector!: string | undefined;
    estimatedStartDate?: Date;
    estimatedEndDate?: Date;
    countryId?: number;
    cityId?: number;
    drillingQuantity?: number;
    projectArea?: number;
    isSubmitted?: boolean | undefined;
    clientId?: number | undefined;
    agreementTypeId?: number;
    isDeleted?: boolean;

    constructor(data?: IAgreementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.projectNumber = _data["projectNumber"];
            this.agreementDate = _data["agreementDate"] ? new Date(_data["agreementDate"].toString()) : undefined as any;
            this.projectName = _data["projectName"];
            this.businessSector = _data["businessSector"];
            this.estimatedStartDate = _data["estimatedStartDate"] ? new Date(_data["estimatedStartDate"].toString()) : undefined as any;
            this.estimatedEndDate = _data["estimatedEndDate"] ? new Date(_data["estimatedEndDate"].toString()) : undefined as any;
            this.countryId = _data["countryId"];
            this.cityId = _data["cityId"];
            this.drillingQuantity = _data["drillingQuantity"];
            this.projectArea = _data["projectArea"];
            this.isSubmitted = _data["isSubmitted"];
            this.clientId = _data["clientId"];
            this.agreementTypeId = _data["agreementTypeId"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): AgreementDto {
        data = typeof data === 'object' ? data : {};
        let result = new AgreementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["projectNumber"] = this.projectNumber;
        data["agreementDate"] = this.agreementDate ? formatDate(this.agreementDate) : undefined as any;
        data["projectName"] = this.projectName;
        data["businessSector"] = this.businessSector;
        data["estimatedStartDate"] = this.estimatedStartDate ? formatDate(this.estimatedStartDate) : undefined as any;
        data["estimatedEndDate"] = this.estimatedEndDate ? formatDate(this.estimatedEndDate) : undefined as any;
        data["countryId"] = this.countryId;
        data["cityId"] = this.cityId;
        data["drillingQuantity"] = this.drillingQuantity;
        data["projectArea"] = this.projectArea;
        data["isSubmitted"] = this.isSubmitted;
        data["clientId"] = this.clientId;
        data["agreementTypeId"] = this.agreementTypeId;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IAgreementDto {
    id?: number | undefined;
    projectNumber?: string | undefined;
    agreementDate?: Date;
    projectName: string | undefined;
    businessSector: string | undefined;
    estimatedStartDate?: Date;
    estimatedEndDate?: Date;
    countryId?: number;
    cityId?: number;
    drillingQuantity?: number;
    projectArea?: number;
    isSubmitted?: boolean | undefined;
    clientId?: number | undefined;
    agreementTypeId?: number;
    isDeleted?: boolean;
}

export class AgreementPaymentDto implements IAgreementPaymentDto {
    id?: number | undefined;
    contractTypeId?: number;
    contractModelId?: number;
    paymentMethodId?: number;
    monthlyPaymentId?: number;
    agreementId?: number;
    monthlyPaymentDto?: MonthlyPaymentDto;

    constructor(data?: IAgreementPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.contractTypeId = _data["contractTypeId"];
            this.contractModelId = _data["contractModelId"];
            this.paymentMethodId = _data["paymentMethodId"];
            this.monthlyPaymentId = _data["monthlyPaymentId"];
            this.agreementId = _data["agreementId"];
            this.monthlyPaymentDto = _data["monthlyPaymentDto"] ? MonthlyPaymentDto.fromJS(_data["monthlyPaymentDto"]) : undefined as any;
        }
    }

    static fromJS(data: any): AgreementPaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AgreementPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contractTypeId"] = this.contractTypeId;
        data["contractModelId"] = this.contractModelId;
        data["paymentMethodId"] = this.paymentMethodId;
        data["monthlyPaymentId"] = this.monthlyPaymentId;
        data["agreementId"] = this.agreementId;
        data["monthlyPaymentDto"] = this.monthlyPaymentDto ? this.monthlyPaymentDto.toJSON() : undefined as any;
        return data;
    }
}

export interface IAgreementPaymentDto {
    id?: number | undefined;
    contractTypeId?: number;
    contractModelId?: number;
    paymentMethodId?: number;
    monthlyPaymentId?: number;
    agreementId?: number;
    monthlyPaymentDto?: MonthlyPaymentDto;
}

export class AgreementServiceDto implements IAgreementServiceDto {
    agreementId?: number;
    serviceId?: number;

    constructor(data?: IAgreementServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.agreementId = _data["agreementId"];
            this.serviceId = _data["serviceId"];
        }
    }

    static fromJS(data: any): AgreementServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AgreementServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agreementId"] = this.agreementId;
        data["serviceId"] = this.serviceId;
        return data;
    }
}

export interface IAgreementServiceDto {
    agreementId?: number;
    serviceId?: number;
}

export class AttachmentDto implements IAttachmentDto {
    id?: number;
    fileName!: string | undefined;
    filePath!: string | undefined;
    base64Data?: string | undefined;
    contentType?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: IAttachmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileName = _data["fileName"];
            this.filePath = _data["filePath"];
            this.base64Data = _data["base64Data"];
            this.contentType = _data["contentType"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): AttachmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttachmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileName"] = this.fileName;
        data["filePath"] = this.filePath;
        data["base64Data"] = this.base64Data;
        data["contentType"] = this.contentType;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IAttachmentDto {
    id?: number;
    fileName: string | undefined;
    filePath: string | undefined;
    base64Data?: string | undefined;
    contentType?: string | undefined;
    isDeleted?: boolean;
}

export class ClientDto implements IClientDto {
    id?: number | undefined;
    contactPerson!: string | undefined;
    contactPersonNumber!: number;
    representerName!: string | undefined;
    representerNameNumber!: number;

    constructor(data?: IClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.contactPerson = _data["contactPerson"];
            this.contactPersonNumber = _data["contactPersonNumber"];
            this.representerName = _data["representerName"];
            this.representerNameNumber = _data["representerNameNumber"];
        }
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactPerson"] = this.contactPerson;
        data["contactPersonNumber"] = this.contactPersonNumber;
        data["representerName"] = this.representerName;
        data["representerNameNumber"] = this.representerNameNumber;
        return data;
    }
}

export interface IClientDto {
    id?: number | undefined;
    contactPerson: string | undefined;
    contactPersonNumber: number;
    representerName: string | undefined;
    representerNameNumber: number;
}

export class ContractorDutyDto implements IContractorDutyDto {
    id?: number | undefined;
    subTotal?: number;
    quantity?: number;
    price?: number;
    unitId?: number;
    dutyTypeId?: number;
    dutyResponsibilityId?: number;
    mainContractId?: number;
    isDeleted?: boolean;

    constructor(data?: IContractorDutyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subTotal = _data["subTotal"];
            this.quantity = _data["quantity"];
            this.price = _data["price"];
            this.unitId = _data["unitId"];
            this.dutyTypeId = _data["dutyTypeId"];
            this.dutyResponsibilityId = _data["dutyResponsibilityId"];
            this.mainContractId = _data["mainContractId"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): ContractorDutyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContractorDutyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subTotal"] = this.subTotal;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["unitId"] = this.unitId;
        data["dutyTypeId"] = this.dutyTypeId;
        data["dutyResponsibilityId"] = this.dutyResponsibilityId;
        data["mainContractId"] = this.mainContractId;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IContractorDutyDto {
    id?: number | undefined;
    subTotal?: number;
    quantity?: number;
    price?: number;
    unitId?: number;
    dutyTypeId?: number;
    dutyResponsibilityId?: number;
    mainContractId?: number;
    isDeleted?: boolean;
}

export class FifthStepDto implements IFifthStepDto {
    supplierServiceDto?: SupplierServiceDto[] | undefined;

    constructor(data?: IFifthStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["supplierServiceDto"])) {
                this.supplierServiceDto = [] as any;
                for (let item of _data["supplierServiceDto"])
                    this.supplierServiceDto!.push(SupplierServiceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FifthStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new FifthStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.supplierServiceDto)) {
            data["supplierServiceDto"] = [];
            for (let item of this.supplierServiceDto)
                data["supplierServiceDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFifthStepDto {
    supplierServiceDto?: SupplierServiceDto[] | undefined;
}

export class FirstStepDto implements IFirstStepDto {
    agreementDto?: AgreementDto;
    clientDto?: ClientDto;
    landInformationDto?: LandInformationDto;

    constructor(data?: IFirstStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.agreementDto = _data["agreementDto"] ? AgreementDto.fromJS(_data["agreementDto"]) : undefined as any;
            this.clientDto = _data["clientDto"] ? ClientDto.fromJS(_data["clientDto"]) : undefined as any;
            this.landInformationDto = _data["landInformationDto"] ? LandInformationDto.fromJS(_data["landInformationDto"]) : undefined as any;
        }
    }

    static fromJS(data: any): FirstStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new FirstStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agreementDto"] = this.agreementDto ? this.agreementDto.toJSON() : undefined as any;
        data["clientDto"] = this.clientDto ? this.clientDto.toJSON() : undefined as any;
        data["landInformationDto"] = this.landInformationDto ? this.landInformationDto.toJSON() : undefined as any;
        return data;
    }
}

export interface IFirstStepDto {
    agreementDto?: AgreementDto;
    clientDto?: ClientDto;
    landInformationDto?: LandInformationDto;
}

export class FourthStepDto implements IFourthStepDto {
    mainContractDto?: MainContractDto[] | undefined;

    constructor(data?: IFourthStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mainContractDto"])) {
                this.mainContractDto = [] as any;
                for (let item of _data["mainContractDto"])
                    this.mainContractDto!.push(MainContractDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FourthStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new FourthStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mainContractDto)) {
            data["mainContractDto"] = [];
            for (let item of this.mainContractDto)
                data["mainContractDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFourthStepDto {
    mainContractDto?: MainContractDto[] | undefined;
}

export class FullAgreementDto implements IFullAgreementDto {
    step?: number;
    agreementId?: number | undefined;
    firstStepDto?: FirstStepDto;
    secondStepDto?: SecondStepDto;
    thirdStepDto?: ThirdStepDto;
    fourthStepDto?: FourthStepDto;
    fifthStepDto?: FifthStepDto;
    sixthStepDto?: SixthStepDto;
    seventhStepDto?: SeventhStepDto;

    constructor(data?: IFullAgreementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.step = _data["step"];
            this.agreementId = _data["agreementId"];
            this.firstStepDto = _data["firstStepDto"] ? FirstStepDto.fromJS(_data["firstStepDto"]) : undefined as any;
            this.secondStepDto = _data["secondStepDto"] ? SecondStepDto.fromJS(_data["secondStepDto"]) : undefined as any;
            this.thirdStepDto = _data["thirdStepDto"] ? ThirdStepDto.fromJS(_data["thirdStepDto"]) : undefined as any;
            this.fourthStepDto = _data["fourthStepDto"] ? FourthStepDto.fromJS(_data["fourthStepDto"]) : undefined as any;
            this.fifthStepDto = _data["fifthStepDto"] ? FifthStepDto.fromJS(_data["fifthStepDto"]) : undefined as any;
            this.sixthStepDto = _data["sixthStepDto"] ? SixthStepDto.fromJS(_data["sixthStepDto"]) : undefined as any;
            this.seventhStepDto = _data["seventhStepDto"] ? SeventhStepDto.fromJS(_data["seventhStepDto"]) : undefined as any;
        }
    }

    static fromJS(data: any): FullAgreementDto {
        data = typeof data === 'object' ? data : {};
        let result = new FullAgreementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["step"] = this.step;
        data["agreementId"] = this.agreementId;
        data["firstStepDto"] = this.firstStepDto ? this.firstStepDto.toJSON() : undefined as any;
        data["secondStepDto"] = this.secondStepDto ? this.secondStepDto.toJSON() : undefined as any;
        data["thirdStepDto"] = this.thirdStepDto ? this.thirdStepDto.toJSON() : undefined as any;
        data["fourthStepDto"] = this.fourthStepDto ? this.fourthStepDto.toJSON() : undefined as any;
        data["fifthStepDto"] = this.fifthStepDto ? this.fifthStepDto.toJSON() : undefined as any;
        data["sixthStepDto"] = this.sixthStepDto ? this.sixthStepDto.toJSON() : undefined as any;
        data["seventhStepDto"] = this.seventhStepDto ? this.seventhStepDto.toJSON() : undefined as any;
        return data;
    }
}

export interface IFullAgreementDto {
    step?: number;
    agreementId?: number | undefined;
    firstStepDto?: FirstStepDto;
    secondStepDto?: SecondStepDto;
    thirdStepDto?: ThirdStepDto;
    fourthStepDto?: FourthStepDto;
    fifthStepDto?: FifthStepDto;
    sixthStepDto?: SixthStepDto;
    seventhStepDto?: SeventhStepDto;
}

export class LandInformationDto implements ILandInformationDto {
    id?: number | undefined;
    plotNumber!: number;
    directorate!: string | undefined;
    village!: string | undefined;
    basinName!: string | undefined;
    basinNumber!: number;
    floorNumber!: number;
    agreementId?: number | undefined;

    constructor(data?: ILandInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.plotNumber = _data["plotNumber"];
            this.directorate = _data["directorate"];
            this.village = _data["village"];
            this.basinName = _data["basinName"];
            this.basinNumber = _data["basinNumber"];
            this.floorNumber = _data["floorNumber"];
            this.agreementId = _data["agreementId"];
        }
    }

    static fromJS(data: any): LandInformationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LandInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["plotNumber"] = this.plotNumber;
        data["directorate"] = this.directorate;
        data["village"] = this.village;
        data["basinName"] = this.basinName;
        data["basinNumber"] = this.basinNumber;
        data["floorNumber"] = this.floorNumber;
        data["agreementId"] = this.agreementId;
        return data;
    }
}

export interface ILandInformationDto {
    id?: number | undefined;
    plotNumber: number;
    directorate: string | undefined;
    village: string | undefined;
    basinName: string | undefined;
    basinNumber: number;
    floorNumber: number;
    agreementId?: number | undefined;
}

export class MainContractDto implements IMainContractDto {
    id?: number | undefined;
    total?: number;
    startDate?: Date;
    endDate?: Date;
    agreementId?: number;
    typeId?: number;
    constructorId?: number;
    isDeleted?: boolean;
    contractorDutyDto?: ContractorDutyDto[] | undefined;

    constructor(data?: IMainContractDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.total = _data["total"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
            this.agreementId = _data["agreementId"];
            this.typeId = _data["typeId"];
            this.constructorId = _data["constructorId"];
            this.isDeleted = _data["isDeleted"];
            if (Array.isArray(_data["contractorDutyDto"])) {
                this.contractorDutyDto = [] as any;
                for (let item of _data["contractorDutyDto"])
                    this.contractorDutyDto!.push(ContractorDutyDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MainContractDto {
        data = typeof data === 'object' ? data : {};
        let result = new MainContractDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["total"] = this.total;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : undefined as any;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : undefined as any;
        data["agreementId"] = this.agreementId;
        data["typeId"] = this.typeId;
        data["constructorId"] = this.constructorId;
        data["isDeleted"] = this.isDeleted;
        if (Array.isArray(this.contractorDutyDto)) {
            data["contractorDutyDto"] = [];
            for (let item of this.contractorDutyDto)
                data["contractorDutyDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMainContractDto {
    id?: number | undefined;
    total?: number;
    startDate?: Date;
    endDate?: Date;
    agreementId?: number;
    typeId?: number;
    constructorId?: number;
    isDeleted?: boolean;
    contractorDutyDto?: ContractorDutyDto[] | undefined;
}

export class MonthlyPaymentDto implements IMonthlyPaymentDto {
    id?: number | undefined;
    amount?: number;

    constructor(data?: IMonthlyPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): MonthlyPaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyPaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IMonthlyPaymentDto {
    id?: number | undefined;
    amount?: number;
}

export class ProjectAreaUnitDto implements IProjectAreaUnitDto {
    id?: number | undefined;
    annexId!: number;
    amount!: number;
    unitId!: number;
    isDeleted?: boolean;

    constructor(data?: IProjectAreaUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.annexId = _data["annexId"];
            this.amount = _data["amount"];
            this.unitId = _data["unitId"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): ProjectAreaUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProjectAreaUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["annexId"] = this.annexId;
        data["amount"] = this.amount;
        data["unitId"] = this.unitId;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IProjectAreaUnitDto {
    id?: number | undefined;
    annexId: number;
    amount: number;
    unitId: number;
    isDeleted?: boolean;
}

export class QuantityBillDto implements IQuantityBillDto {
    id?: number | undefined;
    materialId!: number;
    unitId?: number;
    ammount!: number;
    price!: number;
    agreementId?: number;
    mileStoneId?: number;
    isDeleted?: boolean;

    constructor(data?: IQuantityBillDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.materialId = _data["materialId"];
            this.unitId = _data["unitId"];
            this.ammount = _data["ammount"];
            this.price = _data["price"];
            this.agreementId = _data["agreementId"];
            this.mileStoneId = _data["mileStoneId"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): QuantityBillDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuantityBillDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["materialId"] = this.materialId;
        data["unitId"] = this.unitId;
        data["ammount"] = this.ammount;
        data["price"] = this.price;
        data["agreementId"] = this.agreementId;
        data["mileStoneId"] = this.mileStoneId;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IQuantityBillDto {
    id?: number | undefined;
    materialId: number;
    unitId?: number;
    ammount: number;
    price: number;
    agreementId?: number;
    mileStoneId?: number;
    isDeleted?: boolean;
}

export class SecondStepDto implements ISecondStepDto {
    agreementPaymentDto?: AgreementPaymentDto;
    agreementServiceDto?: AgreementServiceDto[] | undefined;

    constructor(data?: ISecondStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.agreementPaymentDto = _data["agreementPaymentDto"] ? AgreementPaymentDto.fromJS(_data["agreementPaymentDto"]) : undefined as any;
            if (Array.isArray(_data["agreementServiceDto"])) {
                this.agreementServiceDto = [] as any;
                for (let item of _data["agreementServiceDto"])
                    this.agreementServiceDto!.push(AgreementServiceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SecondStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new SecondStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agreementPaymentDto"] = this.agreementPaymentDto ? this.agreementPaymentDto.toJSON() : undefined as any;
        if (Array.isArray(this.agreementServiceDto)) {
            data["agreementServiceDto"] = [];
            for (let item of this.agreementServiceDto)
                data["agreementServiceDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISecondStepDto {
    agreementPaymentDto?: AgreementPaymentDto;
    agreementServiceDto?: AgreementServiceDto[] | undefined;
}

export class SeventhStepDto implements ISeventhStepDto {
    agreementId?: number;
    attachmentDto?: AttachmentDto[] | undefined;

    constructor(data?: ISeventhStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.agreementId = _data["agreementId"];
            if (Array.isArray(_data["attachmentDto"])) {
                this.attachmentDto = [] as any;
                for (let item of _data["attachmentDto"])
                    this.attachmentDto!.push(AttachmentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SeventhStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new SeventhStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agreementId"] = this.agreementId;
        if (Array.isArray(this.attachmentDto)) {
            data["attachmentDto"] = [];
            for (let item of this.attachmentDto)
                data["attachmentDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISeventhStepDto {
    agreementId?: number;
    attachmentDto?: AttachmentDto[] | undefined;
}

export class SixthStepDto implements ISixthStepDto {
    quantityBillDto?: QuantityBillDto[] | undefined;

    constructor(data?: ISixthStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["quantityBillDto"])) {
                this.quantityBillDto = [] as any;
                for (let item of _data["quantityBillDto"])
                    this.quantityBillDto!.push(QuantityBillDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SixthStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new SixthStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.quantityBillDto)) {
            data["quantityBillDto"] = [];
            for (let item of this.quantityBillDto)
                data["quantityBillDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISixthStepDto {
    quantityBillDto?: QuantityBillDto[] | undefined;
}

export class SupplierServiceDto implements ISupplierServiceDto {
    id?: number | undefined;
    representativeName!: string | undefined;
    materialId!: number;
    supplierId?: number;
    agreementId?: number;
    isDeleted?: boolean;

    constructor(data?: ISupplierServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.representativeName = _data["representativeName"];
            this.materialId = _data["materialId"];
            this.supplierId = _data["supplierId"];
            this.agreementId = _data["agreementId"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): SupplierServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["representativeName"] = this.representativeName;
        data["materialId"] = this.materialId;
        data["supplierId"] = this.supplierId;
        data["agreementId"] = this.agreementId;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface ISupplierServiceDto {
    id?: number | undefined;
    representativeName: string | undefined;
    materialId: number;
    supplierId?: number;
    agreementId?: number;
    isDeleted?: boolean;
}

export class ThirdStepDto implements IThirdStepDto {
    projectAreaUnitDto?: ProjectAreaUnitDto[] | undefined;

    constructor(data?: IThirdStepDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["projectAreaUnitDto"])) {
                this.projectAreaUnitDto = [] as any;
                for (let item of _data["projectAreaUnitDto"])
                    this.projectAreaUnitDto!.push(ProjectAreaUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ThirdStepDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThirdStepDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.projectAreaUnitDto)) {
            data["projectAreaUnitDto"] = [];
            for (let item of this.projectAreaUnitDto)
                data["projectAreaUnitDto"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IThirdStepDto {
    projectAreaUnitDto?: ProjectAreaUnitDto[] | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}